      subroutine load_selfquad(ipv,iord,ns,xs,ws)
      implicit real *8 (a-h,o-z)
      integer, intent(in) :: ipv,iord,ns
      real *8, intent(out) :: xs(ns),ws(ns)

      if(ipv.eq.0) then
        call load_selfquad_ipv0(iord,ns,xs,ws)
      endif


      return
      end



      subroutine get_nqorder_selfquad(ipv,iord,ns)
      implicit real *8 (a-h,o-z)
      if(ipv.eq.0) then
        if(iord.eq.1) ns = 8
        if(iord.eq.2) ns = 15
        if(iord.eq.3) ns = 24
        if(iord.eq.4) ns = 36
      endif

      return
      end


      subroutine load_selfquad_ipv0(iord,ns,xs,ws)
      implicit real *8 (a-h,o-z)
      real *8 xs(ns),ws(ns)
      integer ns0

      if(iord.eq.1) call load_selfquad_ipv0_iord1(xs,ws,ns0)
      if(iord.eq.2) call load_selfquad_ipv0_iord2(xs,ws,ns0)
      if(iord.eq.3) call load_selfquad_ipv0_iord3(xs,ws,ns0)
      if(iord.eq.4) call load_selfquad_ipv0_iord4(xs,ws,ns0)

      return
      end



      subroutine load_selfquad_ipv0_iord1(xs,ws,ns)
      implicit real *8 (a-h,o-z)
      dimension xr(  8), wr(  8),xs(*), ws(*)
c
c
c
        ns =   8
c
c
c
        data xr/
     *   -.99307846605709621276580315258464D+00,
     *   -.90869437782635420461732418185590D+00,
     *   -.63475845509336137133524266365111D+00,
     *   -.16102163440325013149822846811106D+00,
     *   0.36912450903361402837973415991098D+00,
     *   0.76715765952524123931401071707455D+00,
     *   0.95419657658790062555090830528226D+00,
     *   0.99753269696699512371527470911907D+00/
c
c
c
        data wr/
     *   0.25840590027542295270099552353740D-01,
     *   0.16450738828826783939255363876442D+00,
     *   0.38611817108340613159245627814232D+00,
     *   0.53531357711736471943581130556658D+00,
     *   0.49049556877640523252224212407188D+00,
     *   0.29172196128885652391548710140059D+00,
     *   0.95863735208089561891658226139922D-01,
     *   0.10139008210067695979691773560554D-01/
c
c
c
      do i=1,  8
        xs(i) = xr(i)
        ws(i) = wr(i)
      enddo
c
c
c
      return
      end




      subroutine load_selfquad_ipv0_iord2(xs,ws,ns)
      implicit real *8 (a-h,o-z)
      dimension xr( 15), wr( 15),xs(*), ws(*)
c
c
c
        ns =  15
c
c
c
        data xr/
     *   -.99940786281070713478390044073234D+00,
     *   -.99139497890450698859626202545084D+00,
     *   -.95954667603305154669021839339824D+00,
     *   -.88356189117923897729429004098817D+00,
     *   -.74727824786338992709326215806053D+00,
     *   -.54572670768890455778868334713186D+00,
     *   -.28876709825591231894952943574097D+00,
     *   0.27135652597437956432270630105947D-20,
     *   0.28876709825591231895459026350196D+00,
     *   0.54572670768890455779275451190232D+00,
     *   0.74727824786338992709601609473993D+00,
     *   0.88356189117923897729578454229438D+00,
     *   0.95954667603305154669081901299193D+00,
     *   0.99139497890450698859640770419578D+00,
     *   0.99940786281070713478391137310833D+00/
c
c
c
        data wr/
     *   0.22495315174167175235992263341904D-02,
     *   0.16614342702479490122642404488583D-01,
     *   0.50606417237003169874786713750785D-01,
     *   0.10418062146911452654500192069331D+00,
     *   0.16927872483318797292697045868307D+00,
     *   0.23216221726859199100204332163792D+00,
     *   0.27772686875986346275317129857112D+00,
     *   0.29436255242468533850893349437136D+00,
     *   0.27772686875986346275245743585796D+00,
     *   0.23216221726859199100082874880964D+00,
     *   0.16927872483318797292561763316563D+00,
     *   0.10418062146911452654389070566277D+00,
     *   0.50606417237003169874120737973143D-01,
     *   0.16614342702479490122377548538546D-01,
     *   0.22495315174167175235583514619846D-02/
c
c
c
      do i=1, 15
        xs(i) = xr(i)
        ws(i) = wr(i)
      enddo
c
c
c
      return
      end



      subroutine load_selfquad_ipv0_iord3(xs,ws,ns)
      implicit real *8 (a-h,o-z)
      dimension xr( 24), wr( 24),xs(*), ws(*)
c
c
c
      ns =  24
c
c
c
      data xr/
     *   -.99990339143569946389977503180477D+00,
     *   -.99854843299865927660379833290941D+00,
     *   -.99283001144918714828705739429840D+00,
     *   -.97804849310139242401002921339557D+00,
     *   -.94876592026532897877643668226400D+00,
     *   -.89984274112738970558997313509211D+00,
     *   -.82735931766180214350648290634026D+00,
     *   -.72926616317679890915265043612196D+00,
     *   -.60572726593651685287586410698486D+00,
     *   -.45917557904724969444807901039039D+00,
     *   -.29411782870517010347547867936306D+00,
     *   -.11673284004644726523881195140459D+00,
     *   0.65686469597517800315577787329271D-01,
     *   0.24539122276007213629042749183027D+00,
     *   0.41487400471085040738628509608805D+00,
     *   0.56754310725270807388116953942411D+00,
     *   0.69831316625311448983430579370541D+00,
     *   0.80405708743550880933491116010423D+00,
     *   0.88387132394963014849406113151030D+00,
     *   0.93911353227011231368118335927223D+00,
     *   0.97317711442104599682833640481976D+00,
     *   0.99097415848875777322466374501928D+00,
     *   0.99811982167778842002960626813864D+00,
     *   0.99987212300465417538515773431828D+00/
c
c
c
        data wr/
     *   0.36932908057915486907034434103233D-03,
     *   0.28639718597147422546384079086771D-02,
     *   0.93711567140146071816737049867848D-02,
     *   0.21116261736702179800619800877782D-01,
     *   0.38321181455193688500449636554233D-01,
     *   0.60189342032518117237579966460428D-01,
     *   0.85124749303898217219166838474203D-01,
     *   0.11103506156471437584117191903534D+00,
     *   0.13563388243997609787862579111461D+00,
     *   0.15671155652274595622553876216026D+00,
     *   0.17236470544415221088953141696897D+00,
     *   0.18117867068172035753119029617753D+00,
     *   0.18235669503585544578991460480430D+00,
     *   0.17579019285069364929880577583448D+00,
     *   0.16206677706595781329482982859982D+00,
     *   0.14241622120630675881233826010479D+00,
     *   0.11859819641793155129344002477491D+00,
     *   0.92738342831325066047657110159505D-01,
     *   0.67120091444264433174400332542446D-01,
     *   0.43938477748347966490705677123209D-01,
     *   0.25021063298264004792382988966762D-01,
     *   0.11526948319333631308375119640310D-01,
     *   0.36603359938634724199829257821669D-02,
     *   0.48678895192650184727419819216531D-03/
c
c
c
      do i=1, 24
        xs(i) = xr(i)
        ws(i) = wr(i)
      enddo
c
c
c
      return
      end
c
c
c
c
      subroutine load_selfquad_ipv0_iord4(xs,ws,ns)
      implicit real *8 (a-h,o-z)
      dimension xr( 36), wr( 36),xs(*), ws(*)

c
c
        ns =  36
c
c
c
        data xr/
     *   -.99996213493487749693283386899193D+00,
     *   -.99944295156340078297749932409409D+00,
     *   -.99732148377888513132778841346885D+00,
     *   -.99201172873305164759022857388851D+00,
     *   -.98175177191151593750890378378491D+00,
     *   -.96484737036458011520367396169398D+00,
     *   -.93983654496564843888000157895319D+00,
     *   -.90558230168656897967485268180290D+00,
     *   -.86131450067195906923297213414023D+00,
     *   -.80664011572660848092557818429137D+00,
     *   -.74153484215923732239313618302361D+00,
     *   -.66632349040156524224038055007766D+00,
     *   -.58165304166828421163478479745060D+00,
     *   -.48846029762886988050625156787003D+00,
     *   -.38793513163791621584706574860875D+00,
     *   -.28147998561958241315038898595938D+00,
     *   -.17066617138687950023224112041732D+00,
     *   -.57187570836790270760899960316009D-01,
     *   0.57187596226038158533274281434868D-01,
     *   0.17066619634719198329421498206612D+00,
     *   0.28148000973330782151773565252438D+00,
     *   0.38793515451006846779753102302472D+00,
     *   0.48846031889870039163939600693196D+00,
     *   0.58165306102111688822937610464020D+00,
     *   0.66632350758092062352278132406961D+00,
     *   0.74153485697916795444063868629294D+00,
     *   0.80664012808395627014581153988076D+00,
     *   0.86131451055784560004416745492202D+00,
     *   0.90558230919572601697091742468318D+00,
     *   0.93983655030106381999226085859143D+00,
     *   0.96484737383335743974503830278218D+00,
     *   0.98175177390623818408233860292394D+00,
     *   0.99201172969276774917469946176526D+00,
     *   0.99732148412822549140754511168197D+00,
     *   0.99944295164089078830715583956547D+00,
     *   0.99996213494036827142637464937022D+00/
c
c
c
        data wr/
     *   0.14415106183067336687497403175548D-03,
     *   0.10850082783300092076088261209721D-02,
     *   0.34272983584337898966379207949458D-02,
     *   0.74899930559153559842915931826053D-02,
     *   0.13315008719338318434701399433224D-01,
     *   0.20738946898324555227896357761174D-01,
     *   0.29472853640201169549000543150561D-01,
     *   0.39164130288675618981053766588163D-01,
     *   0.49436819395313108399232712912327D-01,
     *   0.59915665923182879693945765634816D-01,
     *   0.70240292858092735499552916001582D-01,
     *   0.80074039092886778208415357372622D-01,
     *   0.89110110850496480950551664620757D-01,
     *   0.97076388663088867145992887917089D-01,
     *   0.10373947328403359546711057332838D+00,
     *   0.10890816019226016101701362135850D+00,
     *   0.11243634898166706052039621924210D+00,
     *   0.11422532318848511141285018198403D+00,
     *   0.11422532297307875041621508883532D+00,
     *   0.11243634834108158695855197000967D+00,
     *   0.10890815914344587636361673442312D+00,
     *   0.10373947185540333120918958098914D+00,
     *   0.97076386894749350716328919603616D-01,
     *   0.89110108794535775049822546152181D-01,
     *   0.80074036813648623441801005630098D-01,
     *   0.70240290432290782866209183057447D-01,
     *   0.59915663439565755553574371095409D-01,
     *   0.49436816953350284441460890994344D-01,
     *   0.39164127995364222813795864239999D-01,
     *   0.29472851603621808639126573797226D-01,
     *   0.20738945216222584323511612281254D-01,
     *   0.13315007461468732670385269330323D-01,
     *   0.74899922416009220863354765625947D-02,
     *   0.34272979373613191173687201483575D-02,
     *   0.10850081315671822347210735750250D-02,
     *   0.14415104108684215871599755163205D-03/
c
c
c
      do i=1, 36
        xs(i) = xr(i)
        ws(i) = wr(i)
      enddo
c
c
c
      return
      end
